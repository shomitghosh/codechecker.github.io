[{"name":"app.R","content":"library(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n\r\n    # Application title\r\n    titlePanel(\"Argus Code Checker v1\"),\r\n\r\n    # Sidebar with a slider input for number of bins \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            fileInput(\"yardiInput\", \"Upload Yardi Extract\"),\r\n            fileInput(\"argusInput\", \"Upload Argus Extract\"),\r\n            textInput(\"fund\",\"Fund Name\"),\r\n            actionButton(\"process\", \"Process Files\")\r\n        ),\r\n\r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n          downloadButton(\"download\", \"Download Processed File\")\r\n        )\r\n    )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n  processedData <- eventReactive(input$process, {\r\n    withProgress(message = 'Processing data', value = 0, {\r\n      progress <- 0\r\n    yardi_tenancy <- readxl::read_excel(input$yardiInput$datapath, sheet = \"TenancySchedule\")\r\n    yardi_vacancy <- readxl::read_excel(input$yardiInput$datapath, sheet = \"Vacancy\")\r\n      progress <- progress + 0.1\r\n      setProgress(value = progress)\r\n    ten_cols <- c(\"PropertyCode\",\"PropertyName\",\"UnitCode\",\"ContractCode\",\"ContractName\")\r\n    vac_cols <- c(\"PropertyCode\",\"PropertyName\",\"UnitCode\")\r\n    progress <- progress + 0.1\r\n    setProgress(value = progress)\r\n    yardi_tenClean <- yardi_tenancy[,ten_cols]\r\n    yardi_vacClean <- yardi_vacancy[,vac_cols]\r\n    \r\n    yardi_vacClean$ContractCode <- yardi_vacClean$UnitCode\r\n    yardi_vacClean$ContractName <- \"VACANT\"\r\n    progress <- progress + 0.1\r\n    setProgress(value = progress)\r\n    yardi <- rbind(yardi_tenClean,yardi_vacClean)\r\n    \r\n    remove_leading_zeros <- function(x) {\r\n      # Check if string contains only digits\r\n      if (grepl(\"^[0-9]+$\", x)) {\r\n        # Remove leading zeros using sub\r\n        return(sub(\"^0*\", \"\", x))\r\n      } else {\r\n        # Return original string if it contains non-digits\r\n        return(x)\r\n      }\r\n    }\r\n    \r\n    yardi$ContractCode <- lapply(yardi$ContractCode, remove_leading_zeros)\r\n    yardi$yardiPropLease <- paste(yardi$PropertyCode, yardi$ContractCode,sep=\"\")\r\n    \r\n    \r\n    argus_raw <- readxl::read_excel(input$argusInput$datapath)\r\n    arg_cols <- c(\"Property Name\", \"External ID\", \"Lease ID\", \"Tenant Name\", \"Rental Value (ERV)\")\r\n    argusClean <- argus_raw[,arg_cols]\r\n    argusClean$argPropLease <- paste(argusClean$`External ID`, argusClean$`Lease ID`, sep = \"\")\r\n    \r\n    progress <- progress + 0.1\r\n    setProgress(value = progress)\r\n    checker <- merge(argusClean, yardi, by.x = \"argPropLease\", by.y = \"yardiPropLease\", all.x = TRUE)\r\n    \r\n    yardi$yardiPropUnit <- paste(yardi$PropertyCode, yardi$UnitCode, sep=\"\")\r\n    checker2 <- merge(argusClean, yardi, by.x = \"argPropLease\", by.y = \"yardiPropUnit\", all.x = TRUE)\r\n    progress <- progress + 0.1\r\n    setProgress(value = progress)\r\n    tempChecker <- checker[is.na(checker$PropertyCode),]\r\n    \r\n    checker3 <- merge(checker, checker2, by.x = \"argPropLease\", by.y = \"argPropLease\",all.x = TRUE)\r\n    \r\n    checker4 <- subset(checker3, subset = is.na(PropertyCode.x) & is.na(PropertyCode.y))\r\n    \r\n    checker4 <- checker4[,c(1:6)]\r\n    \r\n    colnames(checker4) <- c(\"ArgusPropLease\",\"Property Name\",\"Property Code\",\"Lease ID\",\"Tenant Name\",\"Rental Value (ERV)\")\r\n    \r\n    checker4 <- unique(checker4)\r\n    checker4$err <- round(nrow(checker4)/nrow(checker2)*100,2)\r\n    progress <- 1\r\n    setProgress(value = progress)\r\n    return(checker4)})\r\n  })\r\n  \r\n  output$download <- downloadHandler(\r\n    filename = function() {\r\n      paste(input$fund,\"_mismatch.xlsx\",sep=\"\")\r\n    },\r\n    content = function(file) {\r\n      # Write the processed data to Excel file\r\n      writexl::write_xlsx(processedData(), path = file)\r\n    }\r\n  )\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
